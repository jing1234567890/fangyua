<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[负载均衡]]></title>
    <url>%2F2019%2F06%2F05%2F%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%2F</url>
    <content type="text"><![CDATA[负载均衡一、负载均衡负载均衡的目的就是让请求到达不同的服务器上。一次请求到服务器之间，有那么多环节，因此可以实现的方法有很多种，实际应用中不外乎以下几种方式。 1.HTTP重定向负载均衡 HTTP重定向负载均衡有一台重定向服务器，它也是一台普通的服务器，其唯一的功能就是根据用户的HTTP请求计算一台应用集群中服务器的地址，并将此地址写入HTTP重定向响应中返回给用户。 这种方案实现起来非常简单，但是需要浏览器请求两次服务器才能完成。并且重定向服务器很容易编程瓶颈，因为一次重定向返回的过程，也是一次标准HTTP请求，如果集群内有10台机器，那HTTP重定向服务器的流量将是应用服务器的10倍，如果有100台估计就要宕机了，所以伸缩性能受到了很大的限制。还有使用302响应码重定向，不利于网站的SEO。 2.DNS域名解析负载均衡 这是利用DNS处理域名解析请求的同时进行负载均衡处理的一种方案。在DNS中配置多个A记录，每次域名解析请求都会根据负载均衡算法计算一个不同的IP地址返回。 DNS域名解析负载均衡的优点是将负载均衡的工作转交给DNS，省掉了网站管理维护负载均衡服务器的麻烦，同时还可以使用智能DNS可以基于地理位置或者ISP来做域名解析，用户将会得到距离最近或者速度最快的一个服务器地址，这样可以加快用户的访问速度，改善性能。但是这种方法也有很大的缺点，DNS是多级解析，每一级都会缓存DNS记录，如果某个服务器变动了，DNS记录更新的时间将会很长，这个速度取决于域名服务商。 一般大型网站都会使用DNS域名解析，利用域名解析作为一级负载均衡手段。你可以使用 dig &lt;域名&gt; 的方法查看某个域名的A记录，你会发现很多网站会有多条A记录。 3.反向代理负载均衡 这种方法就是使用反向代理服务器，它一般在web服务器前面，这个位置也正好是负载均衡服务器的位置，所以大多数反向代理服务器同时也提供负载均衡的功能。 由于web服务器不直接对外提供访问，因此web服务器不需要使用外部IP，而反向代理服务器则需要配置双网卡和内部外部两套IP地址。 反向代理服务器转发请求是在HTTP协议层面，因此也叫应用层负载均衡，由于应用层在七层网络模型中的第七层，所以一般也称为七层负载均衡。优点就是和反向代理功服务器功能集成在一起，部署简单。缺点是反向代理服务器是所有请求和响应的中转站，其性能可能会成为瓶颈。4.网络层负载均衡 这种方法是在网络层通过修改请求目标地址进行负载均衡，网络层在七层网络层模型的第四层，所以也叫做四层负载均衡，也叫做IP层负载均衡。 请求达到负载均衡服务器后，由负载均衡服务器在操作系统内核进程获取网络数据包，根据负载均衡算法得到一台真实web服务器的地址，然后修改请求的目的地址到这台真实的web服务器地址，等到web服务器处理完成后，响应数据包回到负载均衡服务器，再将数据包源地址修改为自身的IP（负载均衡服务器的IP）地址发送给用户浏览器这里关键在于真实无力web服务器响应数据包如何返回给负载均衡服务器。一种是源地址转换（SNAT），第二种是负载均衡服务器作为网关服务器。 网络层的负载均衡在内核进程完成数据转发，有更好的性能。但是由于响应请求的流量要经过负载均衡服务器，容易成为瓶颈。5.数据链路层负载均衡 数据链路层主要处理 mac 地址，所以使用修改mac地址进行转发请求。负载均衡数据分发过程中不修改IP地址，只修改mac地址，通过配置真实物理服务器集群所有机器虚拟IP和负载均衡服务器IP地址一致，从而达到不修改数据包的源地址和目的地址就可以进行数据分发的目的。由于web服务器的服务器地址IP和数据请求目的IP地址一致，不需要通过负载均衡服务器进行地址转换，可将相应数据包直接返回用户。如果有足够的公有IP，其实web服务器也可以直接使用自己的IP响应请求，不过这样web服务器必须绑定负载均衡的虚拟IP地址（VIP），才能保证web服务器收到来自负载均衡发送的数据包。 这种方式称作三角传输模式，单臂模式，也叫做直接路由方式（DR）。使用DR方式的链路层负载均衡是目前大型网站使用最广的一种负载均衡手段。二、关于负载均衡演进 一个应用的流量从多到少，负载均衡的演进基本都是一个套路（以下内容有修改），大致打演进过程如下： nginx做反向代理的同时也做七层负载均衡。 使用四层的代理负载均衡，并使用主备，一般使用HAproxy或者LVS。 使用单臂模式加七层代理集群，一般是LVS（DR模式）主备+HAproxy集群（七层负载均衡）Nginx 做负载均衡是非常方便的，如果一个机器满足不了需求了，可以直接做一个反向代理加上负载均衡。四层的代理负载均衡比七层负载均衡性能好很多，集群规模可以迅速扩大，并且可以细分服务。 当公司的规模很大的时候，有多个机房、多个大型服务时，LVS（单臂）+HAproxy（七层）就更适合了，如下图所示（网上盗了一张图）： 目前大多数服务正在使用2和3的模式，将来需要全量SSL加密，所以新浪准备在LVS层上加一个SSL加解密集群。请求进LVS的443端口，之后被转发到SSL集群中进行解密，再回到LVS下接HAproxy的80端口，做七层负载均衡。这样可以收紧证书，也可以将服务的入口统一，虽然在性能上可能会有很大的挑战。负载均衡未来的发展可能将会是四层代理+ospf集群模式，每一层都是代理。 三、总结 现在使用的负载均衡无外乎这几种方式，或者几种方式的组合。这篇文章只是负载均衡的基础知识，并没有涉及到太多的应用，LVS、HAproxy、Nginx等在使用中还有很多细节的区别，但都是以上模型。关于这三个软件的负载均衡，如果以后使用到了会再讨论。]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>了解负载均衡</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[docker常用命令]]></title>
    <url>%2F2019%2F06%2F04%2Fdocker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[docker常用命令Docker 命令有两大类，客户端命令和服务端命令。前者是主要的操作接口，后者用来启动 Docker Daemon。 客户端命令：基本命令格式为 docker [OPTIONS] COMMAND [arg...]； 服务端命令：基本命令格式为 dockerd [OPTIONS]。` 可以通过 man docker 或 docker help 来查看这些命令。&lt; !– more –&gt; 常用方法： docker build -t friendlyname .# 使用此目录的 Dockerfile 创建镜像 docker run -p 4000:80 friendlyname # 运行端口 4000 到 90 的“友好名称”映射 docker run -d -p 4000:80 friendlyname # 内容相同，但在分离模式下 docker ps # 查看所有正在运行的容器的列表 docker stop &lt;hash# 平稳地停止指定的容器 docker ps -a # 查看所有容器的列表，甚至包含未运行的容器 docker kill &lt;hash # 强制关闭指定的容器 docker rm &lt;hash # 从此机器中删除指定的容器 docker rm $(docker ps -a -q) # 从此机器中删除所有容器 docker images -a # 显示此机器上的所有镜像 docker rmi &lt;imagename # 从此机器中删除指定的镜像 docker rmi $(docker images -q) # 从此机器中删除所有镜像 docker login # 使用您的 Docker 凭证登录此 CLI 会话 docker tag &lt;imageusername/repository:tag # 标记 &lt;image以上传到镜像库 docker push username/repository:tag# 将已标记的镜像上传到镜像库 docker run username/repository:tag # 运行镜像库中的镜像 docker stack ls # 列出此 Docker 主机上所有正在运行的应用 docker stack deploy -c # 运行指定的 Compose 文件 docker stack services # 列出与应用关联的服务 docker stack ps # 列出与应用关联的正在运行的容器 docker stack rm # 清除应用 以下是与 swarm 进行交互时您可能会运行的命令： docker-machine create –driver virtualbox myvm1 # 创建 VM（Mac、Win7、Linux） docker-machine create -d hyperv –hyperv-virtual-switch “myswitch” myvm1 # Win10 docker-machine env myvm1# 查看有关节点的基本信息 docker-machine ssh myvm1 “docker node ls” # 列出 swarm 中的节点 docker-machine ssh myvm1 “docker node inspect “# 检查节点 docker-machine ssh myvm1 “docker swarm join-token -q worker” # 查看加入令牌 docker-machine ssh myvm1 # 打开与 VM 的 SSH 会话；输入“exit”以结束会话 docker-machine ssh myvm2 “docker swarm leave” # 使工作节点退出 swarm docker-machine ssh myvm1 “docker swarm leave -f” # 使主节点退出，终止 swarm docker-machine start myvm1# 启动当前未运行的 VM docker-machine stop $(docker-machine ls -q) # 停止所有正在运行的 VM docker-machine rm $(docker-machine ls -q) # 删除所有 VM 及其磁盘镜像 docker-machine scp docker-compose.yml myvm1:~ # 将文件复制到节点的主目录 docker-machine ssh myvm1 “docker stack deploy -c “ # 部署应用 docker network ls#查看网络 docker network inspect +#查看某个网络的详细信息  bridge模式：使用–net =bridge指定为每一个容器分配Network Namespace  host模式：使用–net =host指定宿主机共用一个Network Namespace  none模式：使用–net =none 指独立的网络，不与外界通信  container模式：使用–net =container:NAMEorID指定 和一个指定的容器共享IP、端口（联盟式）、 docker network inspect bridge + 查看容器网络 （检查网络是查找容器IP地址的简便方法。） docker network disconnect bridge +bridge网络的名称 断开容器来从网络中删除容器 docker network create -d bridge my_bridge 创建一个名为my_bridge网络 docker run -d –net=my_bridge –name db training/postgres 运行一个容器使用my_bridge网络 docker run -v /Users/:/:ro(只读) IMAGE [COMMAND] [ARG…] 指定储存卷 docker create -v +共享卷名字 –name XXX +镜像 /bin/true 所有容器都使用共同的层 docker run -d –volumes-from +共享名字 –name XXX1 +镜像 docker run -d –volumes-from +共享名字 –name XXX2 +镜像 docker volume ls -f dangling=true 查找悬空卷 docker run –rm -v /foo -v awesome:/bar busybox top 删除容器后需要数据卷任然存在此命令创建匿名/foo卷。移除容器后，Docker Engine会删除/foo卷但不会删除awesome卷。 docker volume prune 删除未使用的卷 参考文档： https://yeasy.gitbooks.io/docker_practice/appendix/command/ https://docs.docker.com/engine/reference/run/#/runtime-privilege-and-linux-capabilities]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker命令1</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用ssh-keygen和ssh-copy-id三步实现SSH无密码登录]]></title>
    <url>%2F2019%2F06%2F03%2F%E4%BD%BF%E7%94%A8ssh-keygen%E5%92%8Cssh-copy-id%E4%B8%89%E6%AD%A5%E5%AE%9E%E7%8E%B0SSH%E6%97%A0%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95%2F</url>
    <content type="text"><![CDATA[使用ssh-keygen和ssh-copy-id三步实现SSH无密码登录linux免密登陆 ssh-keygen 产生公钥与私钥对.ssh-copy-id 将本机的公钥复制到远程机器的authorized_keys文件中，ssh-copy-id也能让你有到远程机器的home, ~./ssh , 和 ~/.ssh/authorized_keys的权利 详细步骤： （a）ssh-keygen #一路回车 用cat命令查看是否生成产生公钥私钥对/ cat root/.ssh/ id_rsa.pub （b）用ssh-copy-id将公钥复制到远程机器中 ssh-copy-id -i .ssh/id_rsa.pub 用户名字@172.16.3.4注意: ssh-copy-id 将key写到远程机器的 ~/ .ssh/authorized_key.文件中#或者直接用ssh-copy-id 服务器IP （c）登录到远程机器不用输入密码 [root@VM_3_13_centos ~]# ssh root@172.16.3.4Last failed login: Thu May 16 21:53:30 CST 2019 from 40.73.39.211 on ssh:nottyThere was 1 failed login attempt since the last successful login.Last login: Thu May 16 21:45:56 2019 from 172.16.3.13[root@VM_3_4_centos ~]# 更详细的参考：https://blog.csdn.net/alifrank/article/details/48241699]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>小技巧</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基于centos7搭建的个人blog]]></title>
    <url>%2F2019%2F06%2F02%2F%E5%9F%BA%E4%BA%8Ecentos7%E6%90%AD%E5%BB%BA%E7%9A%84%E4%B8%AA%E4%BA%BAblog%2F</url>
    <content type="text"><![CDATA[四步完成基于centos7搭建的个人blog ** 2019-06-01 02:26:30** 搭建blog的原因： 经验知识的总结： 在技术成长的道路中，你肯定会遇到各种各样的问题，为了保证下次遇到同样的问题不会重复浪费时间，就可以把把这些问题记录了下来，防止再次碰到同样的问题还是一头雾水，这样太过浪费时间了。 建立个人网站： 不受任何第三方管理，并且还能够自定义成自己喜欢的样子。还有，如果你是个程序猿，那就更没有理由不自己搭建一个独立博客了。 一、环境准备：需要git，nvm，nodejs，hexo 1、安装git： sudo yum install git-core 2、安装nvm： wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.32.1/install.sh | bash 默认安装好的目前在/root/.nvm 下，如果想用命令的话，需要环境变量 export NVMDIR=&quot;$HOME/.nvm&quot; [ -s &quot;$NVMDIR/nvm.sh&quot; ] &amp;&amp; . &quot;$NVM_DIR/nvm.sh&quot; .安装 Node.js 的最佳方式是使用 nvm 3、安装nodejs： nvm install stable 4、安装hexo： npm install -g hexo-cli 如果遇到问题参考：https://www.jianshu.com/p/cce30447fc35 5、在服务器中执行：hexo init username.github.io` （或者你要绑定的域名的名字）这里我是用的域名， hexo init fangyuan.中国 二、github仓库创建及hexo配置 6、github中注册自己的账号，并建立repositories存储库 （我的https://github.com/jing1234567890） 创建一个我们自己的Github Pages项目。点击New repository。 7、然后选择主题https://hexo.io/themes/ 用git clone 下来你想要的主题到你的仓库中。主题要放在 themes下哦，（后续会在_config.yml里配置的） git clone https://github.com/iissnan/hexo-theme-next themes/next 8、配置你的基础配置文件也是系统配置文件， cd fangyuan.中国 ；vim _config.yml 进行编辑，具体配置参考：https://hexo.io/zh-cn/docs/configuration.html 对照着修改，需要注意配置的键值之间一定要有空格。 title: 方~a源·blog # 网站标题 subtitle: Keep It Simple Do It Well # 网站副标题 description: 舒展从容的恬静生活-有条不紊的奋斗前行 # 网站描述 language: zh-Hans#语言 中文 theme: next #刚刚安装的主题名称 deploy: type: git//使用Git 发布 repo: https://github.com/username/username.github.io.git// 刚创建的Github仓库 9、接下来是主题配置文件（可选），目录在项目目录fangyuan.中国/themes/_config.yml 配置参考：http://theme-next.iissnan.com/getting-started.html#theme-settings 三、测试网站可用性 10、完成两个配置后可以进行测试： 在fangyuan.中国/source/_posts下创建你的第一个博客吧，例如，创建一个名为one.md的文件，注意保存。博客-first-day.md title: 基于centos7搭建的个人blog date: 2019-06-01 02:26:30 tags: hexo s --debug 意思是开启服务并打开调试功能，通过浏览器中输入https://localhost:4000 本地预览! hexo的命令参考：https://hexo.io/zh-cn/docs/commands 11、安装hexo-deployer-git自动部署发布工具 npm install hexo-deployer-git --save 12、测试没问题生成静态网页文件发布至我们的Github pages 中 hexo clean &amp;&amp; hexo g &amp;&amp; hexo d 清除缓存文件 &amp;生成静态文件&amp;部署网站 如果这是你的第一次，终端会让你输入Github 的邮箱和密码，正确输入后，骚等片刻，就会把你的博客上传至Github 了。 13、等待五分钟就可以访问了，浏览器输入，之前github中的仓库名 我的是jing1234567890.github.io 四、域名绑定到 15、如果有域名可以绑定起来， ） 我的是腾讯云的域名，由于是域名到域名直接的解析，所以配置CHNAME，（需要提前在fangyaun.中国/soure文件夹下创建 CNAME的文件，文件没有后缀，里面的内容为你购买的域名，不要以http以及www等前缀，只需域名本身即可，如 l.ibai.cn） 主机记录www 记录类型CHNAME记录值jing1234567890.github.io ） 也可以添加ping jing1234567890.github.io jing1234567890.github.io (185.199.111.153) 56(84) bytes of data，解析到的ip 配置，记录类型为A记录，记录值填ip。 参考文档： 如果是windos搭建参考：https://juejin.im/entry/5a574864f265da3e3c6c1217 Hexo常用命令以及配置：https://blog.csdn.net/gqzydh/article/details/86569300 个人github项目地址：https://github.com/jing1234567890/jing1234567890.github.io 2019/6/2 6:33:10]]></content>
      <categories>
        <category>next</category>
      </categories>
      <tags>
        <tag>关于hexo_next搭建</tag>
      </tags>
  </entry>
</search>
