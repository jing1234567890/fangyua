<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[使用ssh-keygen和ssh-copy-id三步实现SSH无密码登录]]></title>
    <url>%2F2019%2F06%2F03%2F%E4%BD%BF%E7%94%A8ssh-keygen%E5%92%8Cssh-copy-id%E4%B8%89%E6%AD%A5%E5%AE%9E%E7%8E%B0SSH%E6%97%A0%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95%2F</url>
    <content type="text"><![CDATA[使用ssh-keygen和ssh-copy-id三步实现SSH无密码登录linux免密登陆 ssh-keygen 产生公钥与私钥对.ssh-copy-id 将本机的公钥复制到远程机器的authorized_keys文件中，ssh-copy-id也能让你有到远程机器的home, ~./ssh , 和 ~/.ssh/authorized_keys的权利 详细步骤： （a）ssh-keygen #一路回车 用cat命令查看是否生成产生公钥私钥对/ cat root/.ssh/ id_rsa.pub （b）用ssh-copy-id将公钥复制到远程机器中 ssh-copy-id -i .ssh/id_rsa.pub 用户名字@172.16.3.4注意: ssh-copy-id 将key写到远程机器的 ~/ .ssh/authorized_key.文件中#或者直接用ssh-copy-id 服务器IP （c）登录到远程机器不用输入密码 [root@VM_3_13_centos ~]# ssh root@172.16.3.4Last failed login: Thu May 16 21:53:30 CST 2019 from 40.73.39.211 on ssh:nottyThere was 1 failed login attempt since the last successful login.Last login: Thu May 16 21:45:56 2019 from 172.16.3.13[root@VM_3_4_centos ~]# 更详细的参考：https://blog.csdn.net/alifrank/article/details/48241699]]></content>
      <tags>
        <tag>linux小技巧</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基于centos7搭建的个人blog]]></title>
    <url>%2F2019%2F06%2F02%2F%E5%9F%BA%E4%BA%8Ecentos7%E6%90%AD%E5%BB%BA%E7%9A%84%E4%B8%AA%E4%BA%BAblog%2F</url>
    <content type="text"><![CDATA[四步完成基于centos7搭建的个人blog ** 2019-06-01 02:26:30** 搭建blog的原因： 经验知识的总结： 在技术成长的道路中，你肯定会遇到各种各样的问题，为了保证下次遇到同样的问题不会重复浪费时间，就可以把把这些问题记录了下来，防止再次碰到同样的问题还是一头雾水，这样太过浪费时间了。 建立个人网站： 不受任何第三方管理，并且还能够自定义成自己喜欢的样子。还有，如果你是个程序猿，那就更没有理由不自己搭建一个独立博客了。 一、环境准备：需要git，nvm，nodejs，hexo 1、安装git： sudo yum install git-core 2、安装nvm： wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.32.1/install.sh | bash 默认安装好的目前在/root/.nvm 下，如果想用命令的话，需要环境变量 export NVMDIR=&quot;$HOME/.nvm&quot; [ -s &quot;$NVMDIR/nvm.sh&quot; ] &amp;&amp; . &quot;$NVM_DIR/nvm.sh&quot; .安装 Node.js 的最佳方式是使用 nvm 3、安装nodejs： nvm install stable 4、安装hexo： npm install -g hexo-cli 如果遇到问题参考：https://www.jianshu.com/p/cce30447fc35 5、在服务器中执行：hexo init username.github.io` （或者你要绑定的域名的名字）这里我是用的域名， hexo init fangyuan.中国 二、github仓库创建及hexo配置 6、github中注册自己的账号，并建立repositories存储库 （我的https://github.com/jing1234567890） 创建一个我们自己的Github Pages项目。点击New repository。 7、然后选择主题https://hexo.io/themes/ 用git clone 下来你想要的主题到你的仓库中。主题要放在 themes下哦，（后续会在_config.yml里配置的） git clone https://github.com/iissnan/hexo-theme-next themes/next 8、配置你的基础配置文件也是系统配置文件， cd fangyuan.中国 ；vim _config.yml 进行编辑，具体配置参考：https://hexo.io/zh-cn/docs/configuration.html 对照着修改，需要注意配置的键值之间一定要有空格。 title: 方~a源·blog # 网站标题 subtitle: Keep It Simple Do It Well # 网站副标题 description: 舒展从容的恬静生活-有条不紊的奋斗前行 # 网站描述 language: zh-Hans#语言 中文 theme: next #刚刚安装的主题名称 deploy: type: git//使用Git 发布 repo: https://github.com/username/username.github.io.git// 刚创建的Github仓库 9、接下来是主题配置文件（可选），目录在项目目录fangyuan.中国/themes/_config.yml 配置参考：http://theme-next.iissnan.com/getting-started.html#theme-settings 三、测试网站可用性 10、完成两个配置后可以进行测试： 在fangyuan.中国/source/_posts下创建你的第一个博客吧，例如，创建一个名为one.md的文件，注意保存。博客-first-day.md title: 基于centos7搭建的个人blog date: 2019-06-01 02:26:30 tags: hexo s --debug 意思是开启服务并打开调试功能，通过浏览器中输入https://localhost:4000 本地预览! hexo的命令参考：https://hexo.io/zh-cn/docs/commands 11、安装hexo-deployer-git自动部署发布工具 npm install hexo-deployer-git --save 12、测试没问题生成静态网页文件发布至我们的Github pages 中 hexo clean &amp;&amp; hexo g &amp;&amp; hexo d 清除缓存文件 &amp;生成静态文件&amp;部署网站 如果这是你的第一次，终端会让你输入Github 的邮箱和密码，正确输入后，骚等片刻，就会把你的博客上传至Github 了。 13、等待五分钟就可以访问了，浏览器输入，之前github中的仓库名 我的是jing1234567890.github.io 四、域名绑定到 15、如果有域名可以绑定起来， ） 我的是腾讯云的域名，由于是域名到域名直接的解析，所以配置CHNAME，（需要提前在fangyaun.中国/soure文件夹下创建 CNAME的文件，文件没有后缀，里面的内容为你购买的域名，不要以http以及www等前缀，只需域名本身即可，如 l.ibai.cn） 主机记录www 记录类型CHNAME记录值jing1234567890.github.io ） 也可以添加ping jing1234567890.github.io jing1234567890.github.io (185.199.111.153) 56(84) bytes of data，解析到的ip 配置，记录类型为A记录，记录值填ip。 参考文档： 如果是windos搭建参考：https://juejin.im/entry/5a574864f265da3e3c6c1217 Hexo常用命令以及配置：https://blog.csdn.net/gqzydh/article/details/86569300 个人github项目地址：https://github.com/jing1234567890/jing1234567890.github.io 2019/6/2 6:33:10]]></content>
      <tags>
        <tag>新技能</tag>
      </tags>
  </entry>
</search>
