<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>方~源·blog</title>
  
  <subtitle>Keep It Simple Do It Well</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://fangyuan.xn--fiqs8s/"/>
  <updated>2019-06-08T02:51:22.989Z</updated>
  <id>http://fangyuan.xn--fiqs8s/</id>
  
  <author>
    <name>Linyuan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>命令进入容器的方法</title>
    <link href="http://fangyuan.xn--fiqs8s/2019/06/08/%E5%91%BD%E4%BB%A4%E8%BF%9B%E5%85%A5%E5%AE%B9%E5%99%A8%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>http://fangyuan.xn--fiqs8s/2019/06/08/命令进入容器的方法/</id>
    <published>2019-06-08T01:56:56.000Z</published>
    <updated>2019-06-08T02:51:22.989Z</updated>
    
    <content type="html"><![CDATA[<h1 id="命令进入容器的方式"><a href="#命令进入容器的方式" class="headerlink" title="命令进入容器的方式"></a>命令进入容器的方式</h1><h2 id="让我们实验一下docker进入容器常用的四种方法；"><a href="#让我们实验一下docker进入容器常用的四种方法；" class="headerlink" title="让我们实验一下docker进入容器常用的四种方法；"></a>让我们实验一下docker进入容器常用的四种方法；</h2><ul><li>使用docker attach（docker原生自带命令）</li></ul><ul><li>使用SSH  （需要容器内安装对应的ssh server）</li></ul><ul><li>使用nsenter  （需要服务器安装命令）</li></ul><ul><li>使用exec   （docker原生自带命令）</li></ul><h2 id="一、使用docker-attach进入Docker容器"><a href="#一、使用docker-attach进入Docker容器" class="headerlink" title="一、使用docker attach进入Docker容器"></a>一、使用docker attach进入Docker容器</h2><ul><li>由于attache为docker自带的客户端命令，可以直接使用</li><li>1、随便运行一个容器： sudo  docker run -itd ubuntu:14.04 /bin/bash</li></ul><img src="/2019/06/08/命令进入容器的方法/0.png"><ul><li>2、用docker ps  -l  （指定看最后一个运行的容器）获取容器id 为45d4b5d25e03 </li></ul><ul><li>3、用命令进入： docker attach 45d4b5d25e03  回车一下</li><li>4、多窗口进入容器发现执行命令是同步的<img src="/2019/06/08/命令进入容器的方法/1.png"></li></ul><blockquote><p>结论：该命令多个窗口同时使用该命令进入该容器时，所有的窗口都会同步显示，如果有一个窗口阻塞了，那么其他窗口也无法再进行操作。所以docker attach命令不太适合于生产环境.</p></blockquote><h2 id="二、使用SSH进入Docker容器"><a href="#二、使用SSH进入Docker容器" class="headerlink" title="二、使用SSH进入Docker容器"></a>二、使用SSH进入Docker容器</h2><blockquote><p>在镜像（或容器）中安装SSH Server，这样就能保证多人进入<br>容器且相互之间不受干扰了，相信大家在当前的生产环境中（没有使用Docker的情况）也是这样做的。但是使用了Docker容器之后不建议使用ssh进入到Docker容<br>器内。参考：<a href="https://www.oschina.net/translate/why-you-dont-need-to-run-sshd-in-docker?cmp" target="_blank" rel="noopener">https://www.oschina.net/translate/why-you-dont-need-to-run-sshd-in-docker?cmp</a></p></blockquote><ul><li>1、运行   <code>docker run -t -i tcbenkhard/centos6-jdk7   /bin/bash</code></li><li>2、进入后修改密码：如果没有passwd命令，就用yum -y install  passwd</li><li>passwd  更新root密码为666</li><li><code>yum -y install  openssh-server  openssh-clients</code>    安装Openssh，使用命令安装ssh server/clien</li></ul><ul><li><code>vi  /etc/ssh/sshd_config</code>  修改SSH配置文件以下选项，去掉#注释，将四个选项启用</li></ul><pre><code>RSAAuthentication yes #启用 RSA 认证PubkeyAuthentication yes #启用公钥私钥配对认证方式AuthorizedKeysFile .ssh/authorized_keys #公钥文件路径（和上面生成的文件同）PermitRootLogin yes #root能使用ssh登录</code></pre><ul><li><p>3、重启ssh服务，并设置开机启动</p></li><li><h1 id="service-sshd-restart-chkconfig-sshd-on"><a href="#service-sshd-restart-chkconfig-sshd-on" class="headerlink" title="service sshd restart; chkconfig sshd on"></a><code>service sshd restart; chkconfig sshd on</code></h1></li><li><p>4、使用exit命令或者ctrl+C来退出当前运行的容器</p></li><li><h1 id="exit"><a href="#exit" class="headerlink" title="exit"></a>exit</h1></li><li><p>5、验证ssh登陆ssh -p 50001   <a href="mailto:root@169.254.32.6" target="_blank" rel="noopener">root@169.254.32.6</a></p></li><li><h1 id="以最新的Ubuntu镜像为模板"><a href="#以最新的Ubuntu镜像为模板" class="headerlink" title="以最新的Ubuntu镜像为模板"></a>以最新的Ubuntu镜像为模板</h1><p>  FROM ubuntu:latest   # 以最新的Ubuntu镜像为模板</p><p>  // 将本目录下的sources.list作为容器的一个文件<br>  ADD sources.list /root/sources.list</p><p>  // 使用阿里Ubuntu源，更新快<br>  RUN cp /root/sources.list  /etc/apt/sources.list.d/aliyun.list</p><p>  RUN apt-get update</p><p>  RUN apt-get install -y openssh-server</p><p>  RUN apt-get install -y net-tools</p><p>  RUN apt-get install -y vim</p><p>  RUN mkdir -p /var/run/sshd</p><p>  RUN mkdir -p mkdir/root/.ssh/<br>  // 修改root密码，便于远程登录</p><p>  RUN echo root:123456 | chpasswd<br>  // 将key生成在指定文件内</p><p>  RUN ssh-keygen -q -t rsa -b 2048  -f /etc/ssh/ssh_host_rsa_key -P ‘’ -N ‘’<br>  // 配置ssh可以使用root登陆</p><p>  RUN sed -i ‘s/PermitRootLogin without-password/PermitRootLogin yes/‘ /etc/ssh/sshd_config</p><p>  // 开放22端口<br>  EXPOSE 22</p><p>  CMD /usr/sbin/sshd -D &amp;</p></li></ul><ul><li><p>使用docker build  -t tag名  .    。然后启动并连接。</p><h2 id="三、使用nsenter进入Docker容器"><a href="#三、使用nsenter进入Docker容器" class="headerlink" title="三、使用nsenter进入Docker容器"></a>三、使用nsenter进入Docker容器</h2></li><li><p>先看nsenter的git的简介：<a href="https://github.com/jpetazzo/nsenter" target="_blank" rel="noopener">https://github.com/jpetazzo/nsenter</a><br>1、使用前提：</p></li></ul><blockquote></blockquote><p>仅适用于Intel 64位平台</p><blockquote><p>需要从主机运行; 它无法在容器内运行</p></blockquote><blockquote><p>要把 nsenter 安装到主机中</p></blockquote><p>2、安装步骤；</p><p>$   wget <a href="https://www.kernel.org/pub/linux/utils/util-linux/v2.24/util-linux-2.24.tar.gz" target="_blank" rel="noopener">https://www.kernel.org/pub/linux/utils/util-linux/v2.24/util-linux-2.24.tar.gz</a></p><p>$   tar -xzvf util-linux-2.24.tar.gz</p><p>$   cd util-linux-2.24/</p><p>$   ./configure –without-ncurses</p><p>$   make nsenter</p><p>$   sudo cp nsenter /usr/local/bin</p><p>3、使用可以先看看命令用法：nsenter –help</p><p>a、需要运行中容器的CONTAINER ID</p><p>通过docker  ps   查看要进入的容器的id</p><p>b、 获取到容器id后，查看容器的pid</p><pre><code>docker inspect --format {{.State.Pid}}  +&lt;容器id&gt;</code></pre><p>c、拿到该进程PID之后我们就可以使用nsenter命令访问该容器</p><p>方法1、<code>sudo nsenter --target &lt;PID号&gt; --mount --uts --ipc --net --pid</code><br>            或者nsenter -t pid号 -n 就 可以进入，这时你执行 ip a 时IP为容器IP。</p><p>方法2、  使用shell脚本 docker-enter，将如下代码保存为docker-enter,  chomod +x docker-enter</p><p>将文件放入PATH路径，mv docker-enter /usr/bin 下</p><p>用法：docker-enter   这里输入docker获取的docker名或者dockerID，就可以进入。</p><p>`#!/bin/sh</p><p>`if [ -e $(dirname “$0”)/nsenter ]; then</p><pre><code># with boot2docker, nsenter is not in the PATH but it is in the same folderNSENTER=$(dirname &quot;$0&quot;)/nsenter </code></pre><p>else</p><pre><code>NSENTER=nsenter</code></pre><p>fi</p><p>if [ -z “$1” ]; then    </p><pre><code>echo &quot;Usage: `basename &quot;$0&quot;` CONTAINER [COMMAND [ARG]...]&quot;echo &quot;&quot; echo &quot;Enters the Docker CONTAINER and executes the specified COMMAND.&quot;echo &quot;If COMMAND is not specified, runs an interactive shell in CONTAINER.&quot;</code></pre><p>else</p><pre><code>PID=$(docker inspect --format &quot;{{.State.Pid}}&quot; &quot;$1&quot;)if [ -z &quot;$PID&quot; ]; then        exit 1  fi   shiftOPTS=&quot;--target $PID --mount --uts --ipc --net --pid --&quot;if [ -z &quot;$1&quot; ]; then        # No command given.        # Use su to clear all host environment variables except for TERM,        # initialize the environment variables HOME, SHELL, USER, LOGNAME, PATH,        # and start a login shell.        &quot;$NSENTER&quot; $OPTS else        # Use env to clear all host environment variables.        &quot;$NSENTER&quot; $OPTS env --ignore-environment -- &quot;$@&quot;fi</code></pre><p>fi``</p><img src="/2019/06/08/命令进入容器的方法/2.png"><h2 id="四、使用docker-exec进入Docker容器"><a href="#四、使用docker-exec进入Docker容器" class="headerlink" title="四、使用docker exec进入Docker容器"></a>四、使用docker exec进入Docker容器</h2><blockquote><p>docker在1.3.X版本之后还提供了一个新的命令exec用于进入容器，这种方式相对更简单常用一些，下面我们来看一下该命令的使用：</p></blockquote><p>$ docker exec –help</p><p>$ docker exec -it   容器id   /bin/bash</p><img src="/2019/06/08/命令进入容器的方法/3.png"><p>以上是一个回顾也是一个整理，温故知新。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;命令进入容器的方式&quot;&gt;&lt;a href=&quot;#命令进入容器的方式&quot; class=&quot;headerlink&quot; title=&quot;命令进入容器的方式&quot;&gt;&lt;/a&gt;命令进入容器的方式&lt;/h1&gt;&lt;h2 id=&quot;让我们实验一下docker进入容器常用的四种方法；&quot;&gt;&lt;a href=&quot;#
      
    
    </summary>
    
      <category term="docker" scheme="http://fangyuan.xn--fiqs8s/categories/docker/"/>
    
    
      <category term="docker进入容器" scheme="http://fangyuan.xn--fiqs8s/tags/docker%E8%BF%9B%E5%85%A5%E5%AE%B9%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>负载均衡</title>
    <link href="http://fangyuan.xn--fiqs8s/2019/06/05/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    <id>http://fangyuan.xn--fiqs8s/2019/06/05/负载均衡/</id>
    <published>2019-06-04T18:20:01.000Z</published>
    <updated>2019-06-08T02:01:08.210Z</updated>
    
    <content type="html"><![CDATA[<h1 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h1><h1 id="一、负载均衡"><a href="#一、负载均衡" class="headerlink" title="一、负载均衡"></a>一、负载均衡</h1><p>负载均衡的目的就是让请求到达不同的服务器上。一次请求到服务器之间，有那么多环节，因此可以实现的方法有很多种，实际应用中不外乎以下几种方式。</p><h2 id="1-HTTP重定向负载均衡"><a href="#1-HTTP重定向负载均衡" class="headerlink" title="1.HTTP重定向负载均衡"></a>1.HTTP重定向负载均衡</h2><ul><li>HTTP重定向负载均衡有一台重定向服务器，它也是一台普通的服务器，其唯一的功能就是根据用户的HTTP请求计算一台应用集群中服务器的地址，并将此地址写入HTTP重定向响应中返回给用户。</li></ul><ul><li><p>这种方案实现起来非常简单，但是需要浏览器请求两次服务器才能完成。并且重定向服务器很容易编程瓶颈，因为一次重定向返回的过程，也是一次标准HTTP请求，如果集群内有10台机器，那HTTP重定向服务器的流量将是应用服务器的10倍，如果有100台估计就要宕机了，所以伸缩性能受到了很大的限制。还有使用302响应码重定向，不利于网站的SEO。</p><h2 id="2-DNS域名解析负载均衡"><a href="#2-DNS域名解析负载均衡" class="headerlink" title="2.DNS域名解析负载均衡"></a>2.DNS域名解析负载均衡</h2></li><li><p>这是利用DNS处理域名解析请求的同时进行负载均衡处理的一种方案。在DNS中配置多个A记录，每次域名解析请求都会根据负载均衡算法计算一个不同的IP地址返回。</p></li></ul><ul><li>DNS域名解析负载均衡的优点是将负载均衡的工作转交给DNS，省掉了网站管理维护负载均衡服务器的麻烦，同时还可以使用智能DNS可以基于地理位置或者ISP来做域名解析，用户将会得到距离最近或者速度最快的一个服务器地址，这样可以加快用户的访问速度，改善性能。但是这种方法也有很大的缺点，DNS是多级解析，每一级都会缓存DNS记录，如果某个服务器变动了，DNS记录更新的时间将会很长，这个速度取决于域名服务商。</li></ul><ul><li><p>一般大型网站都会使用DNS域名解析，利用域名解析作为一级负载均衡手段。你可以使用 dig &lt;域名&gt; 的方法查看某个域名的A记录，你会发现很多网站会有多条A记录。</p><h2 id="3-反向代理负载均衡"><a href="#3-反向代理负载均衡" class="headerlink" title="3.反向代理负载均衡"></a>3.反向代理负载均衡</h2></li><li><p>这种方法就是使用反向代理服务器，它一般在web服务器前面，这个位置也正好是负载均衡服务器的位置，所以大多数反向代理服务器同时也提供负载均衡的功能。</p></li></ul><ul><li>由于web服务器不直接对外提供访问，因此web服务器不需要使用外部IP，而反向代理服务器则需要配置双网卡和内部外部两套IP地址。</li></ul><ul><li>反向代理服务器转发请求是在HTTP协议层面，因此也叫应用层负载均衡，由于应用层在七层网络模型中的第七层，所以一般也称为七层负载均衡。优点就是和反向代理功服务器功能集成在一起，部署简单。缺点是反向代理服务器是所有请求和响应的中转站，其性能可能会成为瓶颈。<h2 id="4-网络层负载均衡"><a href="#4-网络层负载均衡" class="headerlink" title="4.网络层负载均衡"></a>4.网络层负载均衡</h2></li><li>这种方法是在网络层通过修改请求目标地址进行负载均衡，网络层在七层网络层模型的第四层，所以也叫做四层负载均衡，也叫做IP层负载均衡。</li></ul><ul><li>请求达到负载均衡服务器后，由负载均衡服务器在操作系统内核进程获取网络数据包，根据负载均衡算法得到一台真实web服务器的地址，然后修改请求的目的地址到这台真实的web服务器地址，等到web服务器处理完成后，响应数据包回到负载均衡服务器，再将数据包源地址修改为自身的IP（负载均衡服务器的IP）地址发送给用户浏览器这里关键在于真实无力web服务器响应数据包如何返回给负载均衡服务器。一种是源地址转换（SNAT），第二种是负载均衡服务器作为网关服务器。</li></ul><ul><li>网络层的负载均衡在内核进程完成数据转发，有更好的性能。但是由于响应请求的流量要经过负载均衡服务器，容易成为瓶颈。<h2 id="5-数据链路层负载均衡"><a href="#5-数据链路层负载均衡" class="headerlink" title="5.数据链路层负载均衡"></a>5.数据链路层负载均衡</h2></li></ul><ul><li>数据链路层主要处理 mac 地址，所以使用修改mac地址进行转发请求。负载均衡数据分发过程中不修改IP地址，只修改mac地址，通过配置真实物理服务器集群所有机器虚拟IP和负载均衡服务器IP地址一致，从而达到不修改数据包的源地址和目的地址就可以进行数据分发的目的。由于web服务器的服务器地址IP和数据请求目的IP地址一致，不需要通过负载均衡服务器进行地址转换，可将相应数据包直接返回用户。如果有足够的公有IP，其实web服务器也可以直接使用自己的IP响应请求，不过这样web服务器必须绑定负载均衡的虚拟IP地址（VIP），才能保证web服务器收到来自负载均衡发送的数据包。</li></ul><ul><li>这种方式称作三角传输模式，单臂模式，也叫做直接路由方式（DR）。使用DR方式的链路层负载均衡是目前大型网站使用最广的一种负载均衡手段。<h1 id="二、关于负载均衡演进"><a href="#二、关于负载均衡演进" class="headerlink" title="二、关于负载均衡演进"></a>二、关于负载均衡演进</h1></li></ul><ul><li>一个应用的流量从多到少，负载均衡的演进基本都是一个套路（以下内容有修改），大致打演进过程如下：</li></ul><ul><li>nginx做反向代理的同时也做七层负载均衡。 使用四层的代理负载均衡，并使用主备，一般使用HAproxy或者LVS。</li></ul><ul><li>使用单臂模式加七层代理集群，一般是LVS（DR模式）主备+HAproxy集群（七层负载均衡）<br>Nginx 做负载均衡是非常方便的，如果一个机器满足不了需求了，可以直接做一个反向代理加上负载均衡。四层的代理负载均衡比七层负载均衡性能好很多，集群规模可以迅速扩大，并且可以细分服务。</li></ul><ul><li><p>当公司的规模很大的时候，有多个机房、多个大型服务时，LVS（单臂）+HAproxy（七层）就更适合了，如下图所示（网上盗了一张图）：</p><img src="/2019/06/05/负载均衡/1.png" title="负载拓扑"></li></ul><hr><p>目前大多数服务正在使用2和3的模式，将来需要全量SSL加密，所以新浪准备在LVS层上加一个SSL加解密集群。请求进LVS的443端口，之后被转发到SSL集群中进行解密，再回到LVS下接HAproxy的80端口，做七层负载均衡。这样可以收紧证书，也可以将服务的入口统一，虽然在性能上可能会有很大的挑战。负载均衡未来的发展可能将会是四层代理+ospf集群模式，每一层都是代理。</p><h1 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h1><ul><li>现在使用的负载均衡无外乎这几种方式，或者几种方式的组合。这篇文章只是负载均衡的基础知识，并没有涉及到太多的应用，LVS、HAproxy、Nginx等在使用中还有很多细节的区别，但都是以上模型。关于这三个软件的负载均衡，如果以后使用到了会再讨论。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;负载均衡&quot;&gt;&lt;a href=&quot;#负载均衡&quot; class=&quot;headerlink&quot; title=&quot;负载均衡&quot;&gt;&lt;/a&gt;负载均衡&lt;/h1&gt;&lt;h1 id=&quot;一、负载均衡&quot;&gt;&lt;a href=&quot;#一、负载均衡&quot; class=&quot;headerlink&quot; title=&quot;一、负载均
      
    
    </summary>
    
      <category term="linux" scheme="http://fangyuan.xn--fiqs8s/categories/linux/"/>
    
    
      <category term="了解负载均衡" scheme="http://fangyuan.xn--fiqs8s/tags/%E4%BA%86%E8%A7%A3%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    
  </entry>
  
  <entry>
    <title>docker常用命令</title>
    <link href="http://fangyuan.xn--fiqs8s/2019/06/04/docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://fangyuan.xn--fiqs8s/2019/06/04/docker常用命令/</id>
    <published>2019-06-04T06:52:44.000Z</published>
    <updated>2019-06-08T02:01:57.311Z</updated>
    
    <content type="html"><![CDATA[<h1 id="docker常用命令"><a href="#docker常用命令" class="headerlink" title="docker常用命令"></a>docker常用命令</h1><p>Docker 命令有两大类，客户端命令和服务端命令。前者是主要的操作接口，后者用来启动 Docker Daemon。</p><pre><code>客户端命令：基本命令格式为 docker [OPTIONS] COMMAND [arg...]；服务端命令：基本命令格式为 dockerd [OPTIONS]。`可以通过 man docker 或 docker help 来查看这些命令。</code></pre><img src="/2019/06/04/docker常用命令/0.png"><h2 id="常用方法："><a href="#常用方法：" class="headerlink" title="常用方法："></a>常用方法：</h2><ul><li>docker build -t friendlyname .# 使用此目录的 Dockerfile 创建镜像</li><li>docker run -p 4000:80 friendlyname  # 运行端口 4000 到 90 的“友好名称”映射</li><li>docker run -d -p 4000:80 friendlyname # 内容相同，但在分离模式下</li><li>docker ps # 查看所有正在运行的容器的列表</li><li>docker stop &lt;hash# 平稳地停止指定的容器</li><li>docker ps -a   # 查看所有容器的列表，甚至包含未运行的容器</li><li>docker kill &lt;hash  # 强制关闭指定的容器</li><li>docker rm &lt;hash # 从此机器中删除指定的容器</li><li>docker rm $(docker ps -a -q)   # 从此机器中删除所有容器</li><li>docker images -a   # 显示此机器上的所有镜像</li><li>docker rmi &lt;imagename   # 从此机器中删除指定的镜像</li><li>docker rmi $(docker images -q) # 从此机器中删除所有镜像</li><li>docker login # 使用您的 Docker 凭证登录此 CLI 会话</li><li>docker tag &lt;imageusername/repository:tag  # 标记 &lt;image以上传到镜像库</li><li>docker push username/repository:tag# 将已标记的镜像上传到镜像库</li><li>docker run username/repository:tag   # 运行镜像库中的镜像</li></ul><hr><ul><li>docker stack ls  # 列出此 Docker 主机上所有正在运行的应用</li><li>docker stack deploy -c <composefile> <appname>  # 运行指定的 Compose 文件</appname></composefile></li><li>docker stack services <appname>   # 列出与应用关联的服务</appname></li><li>docker stack ps <appname>   # 列出与应用关联的正在运行的容器</appname></li><li>docker stack rm <appname> # 清除应用</appname></li></ul><hr><ul><li>以下是与 swarm 进行交互时您可能会运行的命令：</li><li>docker-machine create –driver virtualbox myvm1 # 创建 VM（Mac、Win7、Linux）</li><li>docker-machine create -d hyperv –hyperv-virtual-switch “myswitch” myvm1 # Win10</li><li>docker-machine env myvm1# 查看有关节点的基本信息</li><li>docker-machine ssh myvm1 “docker node ls” # 列出 swarm 中的节点</li><li>docker-machine ssh myvm1 “docker node inspect <node id>“# 检查节点</node></li><li>docker-machine ssh myvm1 “docker swarm join-token -q worker”   # 查看加入令牌</li><li>docker-machine ssh myvm1   # 打开与 VM 的 SSH 会话；输入“exit”以结束会话</li><li>docker-machine ssh myvm2 “docker swarm leave”  # 使工作节点退出 swarm</li><li>docker-machine ssh myvm1 “docker swarm leave -f” # 使主节点退出，终止 swarm</li><li>docker-machine start myvm1# 启动当前未运行的 VM</li><li>docker-machine stop $(docker-machine ls -q)   # 停止所有正在运行的 VM</li><li>docker-machine rm $(docker-machine ls -q) # 删除所有 VM 及其磁盘镜像</li><li>docker-machine scp docker-compose.yml myvm1:~ # 将文件复制到节点的主目录</li><li>docker-machine ssh myvm1 “docker stack deploy -c <file> <app>“   # 部署应用</app></file></li></ul><hr><ul><li>docker network ls#查看网络</li><li>docker network inspect   +#查看某个网络的详细信息</li><li> bridge模式：使用–net =bridge指定为每一个容器分配Network Namespace</li><li> host模式：使用–net =host指定宿主机共用一个Network Namespace</li><li> none模式：使用–net =none 指独立的网络，不与外界通信</li><li> container模式：使用–net =container:NAMEorID指定 和一个指定的容器共享IP、端口（联盟式）、</li><li>docker network inspect bridge  + 查看容器网络 （检查网络是查找容器IP地址的简便方法。）</li><li>docker network disconnect bridge +bridge网络的名称  断开容器来从网络中删除容器</li><li>docker network create -d bridge my_bridge 创建一个名为my_bridge网络</li><li>docker run -d –net=my_bridge –name db training/postgres 运行一个容器使用my_bridge网络</li></ul><hr><ul><li>docker run -v /Users/<path></path>:/<container path>:ro(只读) IMAGE [COMMAND] [ARG…]  指定储存卷</container></li><li>docker create -v +共享卷名字 –name XXX  +镜像 /bin/true   所有容器都使用共同的层</li><li>docker run -d –volumes-from +共享名字 –name XXX1 +镜像</li><li>docker run -d –volumes-from +共享名字 –name XXX2 +镜像</li><li>docker volume ls -f dangling=true   查找悬空卷</li><li>docker run –rm -v /foo -v awesome:/bar busybox top 删除容器后需要数据卷任然存在此命令创建匿名/foo卷。移除容器后，Docker Engine会删除/foo卷但不会删除awesome卷。</li><li>docker volume prune  删除未使用的卷</li></ul><hr><h2 id="参考文档："><a href="#参考文档：" class="headerlink" title="参考文档："></a>参考文档：</h2><ul><li><p><a href="https://yeasy.gitbooks.io/docker_practice/appendix/command/" target="_blank" rel="noopener">https://yeasy.gitbooks.io/docker_practice/appendix/command/</a></p></li><li><p><a href="https://docs.docker.com/engine/reference/run/#/runtime-privilege-and-linux-capabilities" target="_blank" rel="noopener">https://docs.docker.com/engine/reference/run/#/runtime-privilege-and-linux-capabilities</a></p><img src="/2019/06/04/docker常用命令/1.png"></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;docker常用命令&quot;&gt;&lt;a href=&quot;#docker常用命令&quot; class=&quot;headerlink&quot; title=&quot;docker常用命令&quot;&gt;&lt;/a&gt;docker常用命令&lt;/h1&gt;&lt;p&gt;Docker 命令有两大类，客户端命令和服务端命令。前者是主要的操作接口，后
      
    
    </summary>
    
      <category term="docker" scheme="http://fangyuan.xn--fiqs8s/categories/docker/"/>
    
    
      <category term="docker命令1" scheme="http://fangyuan.xn--fiqs8s/tags/docker%E5%91%BD%E4%BB%A41/"/>
    
  </entry>
  
  <entry>
    <title>使用ssh-keygen和ssh-copy-id三步实现SSH无密码登录</title>
    <link href="http://fangyuan.xn--fiqs8s/2019/06/03/%E4%BD%BF%E7%94%A8ssh-keygen%E5%92%8Cssh-copy-id%E4%B8%89%E6%AD%A5%E5%AE%9E%E7%8E%B0SSH%E6%97%A0%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95/"/>
    <id>http://fangyuan.xn--fiqs8s/2019/06/03/使用ssh-keygen和ssh-copy-id三步实现SSH无密码登录/</id>
    <published>2019-06-03T07:08:27.000Z</published>
    <updated>2019-06-04T06:32:54.926Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用ssh-keygen和ssh-copy-id三步实现SSH无密码登录"><a href="#使用ssh-keygen和ssh-copy-id三步实现SSH无密码登录" class="headerlink" title="使用ssh-keygen和ssh-copy-id三步实现SSH无密码登录"></a>使用ssh-keygen和ssh-copy-id三步实现SSH无密码登录</h1><h2 id="linux免密登陆"><a href="#linux免密登陆" class="headerlink" title="linux免密登陆"></a>linux免密登陆</h2><ul><li><p>ssh-keygen  产生公钥与私钥对.<br>ssh-copy-id 将本机的公钥复制到远程机器的authorized_keys文件中，ssh-copy-id也能让你有到远程机器的home, ~./ssh , 和 ~/.ssh/authorized_keys的权利</p><h2 id="详细步骤："><a href="#详细步骤：" class="headerlink" title="详细步骤："></a>详细步骤：</h2></li><li><p>（a）ssh-keygen  #一路回车</p><blockquote><p>用cat命令查看是否生成产生公钥私钥对/</p></blockquote></li></ul><blockquote><p> <code>cat  root/.ssh/ id_rsa.pub</code></p></blockquote><hr><ul><li>（b）用ssh-copy-id将公钥复制到远程机器中</li></ul><blockquote><p><code>ssh-copy-id -i .ssh/id_rsa.pub  用户名字@172.16.3.4</code><br>注意: ssh-copy-id 将key写到远程机器的 ~/ .ssh/authorized_key.文件中#或者直接用ssh-copy-id   服务器IP</p></blockquote><hr><ul><li>（c）登录到远程机器不用输入密码</li></ul><blockquote><p>[root@VM_3_13_centos ~]# <code>ssh root@172.16.3.4</code><br>Last failed login: Thu May 16 21:53:30 CST 2019 from 40.73.39.211 on ssh:notty<br>There was 1 failed login attempt since the last successful login.<br>Last login: Thu May 16 21:45:56 2019 from 172.16.3.13<br>[root@VM_3_4_centos ~]# </p></blockquote><hr><p>更详细的参考：<br><a href="https://blog.csdn.net/alifrank/article/details/48241699" target="_blank" rel="noopener">https://blog.csdn.net/alifrank/article/details/48241699</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;使用ssh-keygen和ssh-copy-id三步实现SSH无密码登录&quot;&gt;&lt;a href=&quot;#使用ssh-keygen和ssh-copy-id三步实现SSH无密码登录&quot; class=&quot;headerlink&quot; title=&quot;使用ssh-keygen和ssh-cop
      
    
    </summary>
    
      <category term="linux" scheme="http://fangyuan.xn--fiqs8s/categories/linux/"/>
    
    
      <category term="小技巧" scheme="http://fangyuan.xn--fiqs8s/tags/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>基于centos7搭建的个人blog</title>
    <link href="http://fangyuan.xn--fiqs8s/2019/06/02/%E5%9F%BA%E4%BA%8Ecentos7%E6%90%AD%E5%BB%BA%E7%9A%84%E4%B8%AA%E4%BA%BAblog/"/>
    <id>http://fangyuan.xn--fiqs8s/2019/06/02/基于centos7搭建的个人blog/</id>
    <published>2019-06-01T22:08:19.000Z</published>
    <updated>2019-06-08T02:01:43.782Z</updated>
    
    <content type="html"><![CDATA[<h1>四步完成基于centos7搭建的个人blog</h1><p>**                                         2019-06-01 02:26:30**</p><h2>搭建blog的原因：</h2><ul><li>经验知识的总结：        在技术成长的道路中，你肯定会遇到各种各样的问题，为了保证下次遇到同样的问题不会重复浪费时间，就可以把把这些问题记录了下来，防止再次碰到同样的问题还是一头雾水，这样太过浪费时间了。</li><li>建立个人网站：        不受任何第三方管理，并且还能够自定义成自己喜欢的样子。还有，如果你是个程序猿，那就更没有理由不自己搭建一个独立博客了。</li></ul><hr><h2>一、环境准备：需要git，nvm，nodejs，hexo</h2><p>1、安装git：    sudo yum install git-core</p><p>2、安装nvm：    wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.32.1/install.sh | bash </p><p>默认安装好的目前在/root/.nvm 下，如果想用命令的话，需要环境变量    export NVM<em>DIR=&quot;$HOME/.nvm&quot;    [ -s &quot;$NVM</em>DIR/nvm.sh&quot; ] &amp;&amp; . &quot;$NVM_DIR/nvm.sh&quot; .安装 Node.js 的最佳方式是使用 nvm</p><p>3、安装nodejs：     nvm install  stable</p><p>4、安装hexo：    npm install -g hexo-cli</p><p>如果遇到问题参考：https://www.jianshu.com/p/cce30447fc355、在服务器中执行：hexo init username.github.io` （或者你要绑定的域名的名字）这里我是用的域名，    hexo  init  fangyuan.中国</p><hr><h2>二、github仓库创建及hexo配置</h2><p>6、github中注册自己的账号，并建立repositories存储库  （我的https://github.com/jing1234567890）创建一个我们自己的Github Pages项目。点击New repository。<img src="https://i.imgur.com/BIVjBoU.png">7、然后选择主题https://hexo.io/themes/  用git clone 下来你想要的主题到你的仓库中。主题要放在 themes下哦，（后续会在_config.yml里配置的）</p><pre><code>git clone https://github.com/iissnan/hexo-theme-next themes/next</code></pre><p>8、配置你的基础配置文件也是系统配置文件，<code>cd  fangyuan.中国  ；vim  _config.yml</code> 进行编辑，具体配置参考：https://hexo.io/zh-cn/docs/configuration.html  对照着修改，需要注意配置的键值之间一定要有空格。</p><pre><code>title: 方~a源·blog # 网站标题subtitle: Keep It Simple Do It Well # 网站副标题description: 舒展从容的恬静生活-有条不紊的奋斗前行 # 网站描述 language: zh-Hans#语言 中文 theme: next   #刚刚安装的主题名称 deploy:   type: git//使用Git 发布   repo: https://github.com/username/username.github.io.git// 刚创建的Github仓库</code></pre><p>9、接下来是主题配置文件（可选），目录在项目目录fangyuan.中国/themes/_config.yml配置参考：http://theme-next.iissnan.com/getting-started.html#theme-settings</p><hr><h2>三、测试网站可用性</h2><p>10、完成两个配置后可以进行测试：在fangyuan.中国/source/_posts下创建你的第一个博客吧，例如，创建一个名为one.md的文件，注意保存。博客-first-day.md   </p><hr><ul><li>title: 基于centos7搭建的个人blog</li><li>date: 2019-06-01 02:26:30</li><li>tags:</li></ul><hr><p>hexo  s  --debug 意思是开启服务并打开调试功能，通过浏览器中输入https://localhost:4000 本地预览!</p><p>hexo的命令参考：https://hexo.io/zh-cn/docs/commands11、安装hexo-deployer-git自动部署发布工具      npm install hexo-deployer-git --save</p><p>12、测试没问题生成静态网页文件发布至我们的Github pages 中<code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code>  清除缓存文件 &amp;生成静态文件&amp;部署网站如果这是你的第一次，终端会让你输入Github 的邮箱和密码，正确输入后，骚等片刻，就会把你的博客上传至Github 了。13、等待五分钟就可以访问了，浏览器输入，之前github中的仓库名我的是jing1234567890.github.io</p><hr><h2>四、域名绑定到</h2><p>15、如果有域名可以绑定起来，</p><ol><li><p>） 我的是腾讯云的域名，由于是域名到域名直接的解析，所以配置CHNAME，（需要提前在fangyaun.中国/soure文件夹下创建 CNAME的文件，文件没有后缀，里面的内容为你购买的域名，不要以http以及www等前缀，只需域名本身即可，如 l.ibai.cn）主机记录www 记录类型CHNAME记录值jing1234567890.github.io  </p></li><li><p>） 也可以添加ping jing1234567890.github.iojing1234567890.github.io (185.199.111.153) 56(84) bytes of data，解析到的ip 配置，记录类型为A记录，记录值填ip。</p></li></ol><hr><h2>参考文档：</h2><ol><li>如果是windos搭建参考：https://juejin.im/entry/5a574864f265da3e3c6c1217 </li><li>Hexo常用命令以及配置：https://blog.csdn.net/gqzydh/article/details/86569300</li><li><p>个人github项目地址：https://github.com/jing1234567890/jing1234567890.github.io</p><pre><code>                                               2019/6/2 6:33:10 </code></pre></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;四步完成基于centos7搭建的个人blog&lt;/h1&gt;
&lt;p&gt;**
                                         2019-06-01 02:26:30**&lt;/p&gt;
&lt;h2&gt;搭建blog的原因：&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;经验知识的总
      
    
    </summary>
    
      <category term="next" scheme="http://fangyuan.xn--fiqs8s/categories/next/"/>
    
    
      <category term="关于hexo_next搭建" scheme="http://fangyuan.xn--fiqs8s/tags/%E5%85%B3%E4%BA%8Ehexo-next%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
</feed>
