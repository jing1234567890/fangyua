<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>方~源·blog</title>
  
  <subtitle>Keep It Simple Do It Well</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://fangyuan.xn--fiqs8s/"/>
  <updated>2019-06-04T07:26:53.791Z</updated>
  <id>http://fangyuan.xn--fiqs8s/</id>
  
  <author>
    <name>Linyuan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>docker常用命令</title>
    <link href="http://fangyuan.xn--fiqs8s/2019/06/04/docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://fangyuan.xn--fiqs8s/2019/06/04/docker常用命令/</id>
    <published>2019-06-04T06:52:44.000Z</published>
    <updated>2019-06-04T07:26:53.791Z</updated>
    
    <content type="html"><![CDATA[<h1 id="docker常用命令"><a href="#docker常用命令" class="headerlink" title="docker常用命令"></a>docker常用命令</h1><p>Docker 命令有两大类，客户端命令和服务端命令。前者是主要的操作接口，后者用来启动 Docker Daemon。</p><pre><code>客户端命令：基本命令格式为 docker [OPTIONS] COMMAND [arg...]；服务端命令：基本命令格式为 dockerd [OPTIONS]。`可以通过 man docker 或 docker help 来查看这些命令。</code></pre><img src="/2019/06/04/docker常用命令/0.png"><h2 id="常用方法："><a href="#常用方法：" class="headerlink" title="常用方法："></a>常用方法：</h2><ul><li>docker build -t friendlyname .# 使用此目录的 Dockerfile 创建镜像</li><li>docker run -p 4000:80 friendlyname  # 运行端口 4000 到 90 的“友好名称”映射</li><li>docker run -d -p 4000:80 friendlyname # 内容相同，但在分离模式下</li><li>docker ps # 查看所有正在运行的容器的列表</li><li>docker stop &lt;hash# 平稳地停止指定的容器</li><li>docker ps -a   # 查看所有容器的列表，甚至包含未运行的容器</li><li>docker kill &lt;hash  # 强制关闭指定的容器</li><li>docker rm &lt;hash # 从此机器中删除指定的容器</li><li>docker rm $(docker ps -a -q)   # 从此机器中删除所有容器</li><li>docker images -a   # 显示此机器上的所有镜像</li><li>docker rmi &lt;imagename   # 从此机器中删除指定的镜像</li><li>docker rmi $(docker images -q) # 从此机器中删除所有镜像</li><li>docker login # 使用您的 Docker 凭证登录此 CLI 会话</li><li>docker tag &lt;imageusername/repository:tag  # 标记 &lt;image以上传到镜像库</li><li>docker push username/repository:tag# 将已标记的镜像上传到镜像库</li><li>docker run username/repository:tag   # 运行镜像库中的镜像</li></ul><hr><ul><li>docker stack ls  # 列出此 Docker 主机上所有正在运行的应用</li><li>docker stack deploy -c <composefile> <appname>  # 运行指定的 Compose 文件</appname></composefile></li><li>docker stack services <appname>   # 列出与应用关联的服务</appname></li><li>docker stack ps <appname>   # 列出与应用关联的正在运行的容器</appname></li><li>docker stack rm <appname> # 清除应用</appname></li></ul><hr><ul><li>以下是与 swarm 进行交互时您可能会运行的命令：</li><li>docker-machine create –driver virtualbox myvm1 # 创建 VM（Mac、Win7、Linux）</li><li>docker-machine create -d hyperv –hyperv-virtual-switch “myswitch” myvm1 # Win10</li><li>docker-machine env myvm1# 查看有关节点的基本信息</li><li>docker-machine ssh myvm1 “docker node ls” # 列出 swarm 中的节点</li><li>docker-machine ssh myvm1 “docker node inspect <node id>“# 检查节点</node></li><li>docker-machine ssh myvm1 “docker swarm join-token -q worker”   # 查看加入令牌</li><li>docker-machine ssh myvm1   # 打开与 VM 的 SSH 会话；输入“exit”以结束会话</li><li>docker-machine ssh myvm2 “docker swarm leave”  # 使工作节点退出 swarm</li><li>docker-machine ssh myvm1 “docker swarm leave -f” # 使主节点退出，终止 swarm</li><li>docker-machine start myvm1# 启动当前未运行的 VM</li><li>docker-machine stop $(docker-machine ls -q)   # 停止所有正在运行的 VM</li><li>docker-machine rm $(docker-machine ls -q) # 删除所有 VM 及其磁盘镜像</li><li>docker-machine scp docker-compose.yml myvm1:~ # 将文件复制到节点的主目录</li><li>docker-machine ssh myvm1 “docker stack deploy -c <file> <app>“   # 部署应用</app></file></li></ul><hr><ul><li>docker network ls#查看网络</li><li>docker network inspect   +#查看某个网络的详细信息</li><li> bridge模式：使用–net =bridge指定为每一个容器分配Network Namespace</li><li> host模式：使用–net =host指定宿主机共用一个Network Namespace</li><li> none模式：使用–net =none 指独立的网络，不与外界通信</li><li> container模式：使用–net =container:NAMEorID指定 和一个指定的容器共享IP、端口（联盟式）、</li><li>docker network inspect bridge  + 查看容器网络 （检查网络是查找容器IP地址的简便方法。）</li><li>docker network disconnect bridge +bridge网络的名称  断开容器来从网络中删除容器</li><li>docker network create -d bridge my_bridge 创建一个名为my_bridge网络</li><li>docker run -d –net=my_bridge –name db training/postgres 运行一个容器使用my_bridge网络</li></ul><hr><ul><li>docker run -v /Users/<path></path>:/<container path>:ro(只读) IMAGE [COMMAND] [ARG…]  指定储存卷</container></li><li>docker create -v +共享卷名字 –name XXX  +镜像 /bin/true   所有容器都使用共同的层</li><li>docker run -d –volumes-from +共享名字 –name XXX1 +镜像</li><li>docker run -d –volumes-from +共享名字 –name XXX2 +镜像</li><li>docker volume ls -f dangling=true   查找悬空卷</li><li>docker run –rm -v /foo -v awesome:/bar busybox top 删除容器后需要数据卷任然存在此命令创建匿名/foo卷。移除容器后，Docker Engine会删除/foo卷但不会删除awesome卷。</li><li>docker volume prune  删除未使用的卷</li></ul><hr><h2 id="参考文档："><a href="#参考文档：" class="headerlink" title="参考文档："></a>参考文档：</h2><ul><li><p><a href="https://yeasy.gitbooks.io/docker_practice/appendix/command/" target="_blank" rel="noopener">https://yeasy.gitbooks.io/docker_practice/appendix/command/</a></p></li><li><p><a href="https://docs.docker.com/engine/reference/run/#/runtime-privilege-and-linux-capabilities" target="_blank" rel="noopener">https://docs.docker.com/engine/reference/run/#/runtime-privilege-and-linux-capabilities</a></p><img src="/2019/06/04/docker常用命令/1.png"></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;docker常用命令&quot;&gt;&lt;a href=&quot;#docker常用命令&quot; class=&quot;headerlink&quot; title=&quot;docker常用命令&quot;&gt;&lt;/a&gt;docker常用命令&lt;/h1&gt;&lt;p&gt;Docker 命令有两大类，客户端命令和服务端命令。前者是主要的操作接口，后
      
    
    </summary>
    
      <category term="docker" scheme="http://fangyuan.xn--fiqs8s/categories/docker/"/>
    
    
      <category term="docker命令1" scheme="http://fangyuan.xn--fiqs8s/tags/docker%E5%91%BD%E4%BB%A41/"/>
    
  </entry>
  
  <entry>
    <title>使用ssh-keygen和ssh-copy-id三步实现SSH无密码登录</title>
    <link href="http://fangyuan.xn--fiqs8s/2019/06/03/%E4%BD%BF%E7%94%A8ssh-keygen%E5%92%8Cssh-copy-id%E4%B8%89%E6%AD%A5%E5%AE%9E%E7%8E%B0SSH%E6%97%A0%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95/"/>
    <id>http://fangyuan.xn--fiqs8s/2019/06/03/使用ssh-keygen和ssh-copy-id三步实现SSH无密码登录/</id>
    <published>2019-06-03T07:08:27.000Z</published>
    <updated>2019-06-04T06:32:54.926Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用ssh-keygen和ssh-copy-id三步实现SSH无密码登录"><a href="#使用ssh-keygen和ssh-copy-id三步实现SSH无密码登录" class="headerlink" title="使用ssh-keygen和ssh-copy-id三步实现SSH无密码登录"></a>使用ssh-keygen和ssh-copy-id三步实现SSH无密码登录</h1><h2 id="linux免密登陆"><a href="#linux免密登陆" class="headerlink" title="linux免密登陆"></a>linux免密登陆</h2><ul><li><p>ssh-keygen  产生公钥与私钥对.<br>ssh-copy-id 将本机的公钥复制到远程机器的authorized_keys文件中，ssh-copy-id也能让你有到远程机器的home, ~./ssh , 和 ~/.ssh/authorized_keys的权利</p><h2 id="详细步骤："><a href="#详细步骤：" class="headerlink" title="详细步骤："></a>详细步骤：</h2></li><li><p>（a）ssh-keygen  #一路回车</p><blockquote><p>用cat命令查看是否生成产生公钥私钥对/</p></blockquote></li></ul><blockquote><p> <code>cat  root/.ssh/ id_rsa.pub</code></p></blockquote><hr><ul><li>（b）用ssh-copy-id将公钥复制到远程机器中</li></ul><blockquote><p><code>ssh-copy-id -i .ssh/id_rsa.pub  用户名字@172.16.3.4</code><br>注意: ssh-copy-id 将key写到远程机器的 ~/ .ssh/authorized_key.文件中#或者直接用ssh-copy-id   服务器IP</p></blockquote><hr><ul><li>（c）登录到远程机器不用输入密码</li></ul><blockquote><p>[root@VM_3_13_centos ~]# <code>ssh root@172.16.3.4</code><br>Last failed login: Thu May 16 21:53:30 CST 2019 from 40.73.39.211 on ssh:notty<br>There was 1 failed login attempt since the last successful login.<br>Last login: Thu May 16 21:45:56 2019 from 172.16.3.13<br>[root@VM_3_4_centos ~]# </p></blockquote><hr><p>更详细的参考：<br><a href="https://blog.csdn.net/alifrank/article/details/48241699" target="_blank" rel="noopener">https://blog.csdn.net/alifrank/article/details/48241699</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;使用ssh-keygen和ssh-copy-id三步实现SSH无密码登录&quot;&gt;&lt;a href=&quot;#使用ssh-keygen和ssh-copy-id三步实现SSH无密码登录&quot; class=&quot;headerlink&quot; title=&quot;使用ssh-keygen和ssh-cop
      
    
    </summary>
    
      <category term="linux" scheme="http://fangyuan.xn--fiqs8s/categories/linux/"/>
    
    
      <category term="小技巧" scheme="http://fangyuan.xn--fiqs8s/tags/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>基于centos7搭建的个人blog</title>
    <link href="http://fangyuan.xn--fiqs8s/2019/06/02/%E5%9F%BA%E4%BA%8Ecentos7%E6%90%AD%E5%BB%BA%E7%9A%84%E4%B8%AA%E4%BA%BAblog/"/>
    <id>http://fangyuan.xn--fiqs8s/2019/06/02/基于centos7搭建的个人blog/</id>
    <published>2019-06-01T22:08:19.000Z</published>
    <updated>2019-06-04T06:33:41.262Z</updated>
    
    <content type="html"><![CDATA[<h1>四步完成基于centos7搭建的个人blog</h1><p>**                                         2019-06-01 02:26:30**</p><h2>搭建blog的原因：</h2><ul><li>经验知识的总结：        在技术成长的道路中，你肯定会遇到各种各样的问题，为了保证下次遇到同样的问题不会重复浪费时间，就可以把把这些问题记录了下来，防止再次碰到同样的问题还是一头雾水，这样太过浪费时间了。</li><li>建立个人网站：        不受任何第三方管理，并且还能够自定义成自己喜欢的样子。还有，如果你是个程序猿，那就更没有理由不自己搭建一个独立博客了。</li></ul><hr><a id="more"></a><h2>一、环境准备：需要git，nvm，nodejs，hexo</h2><p>1、安装git：    sudo yum install git-core</p><p>2、安装nvm：    wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.32.1/install.sh | bash </p><p>默认安装好的目前在/root/.nvm 下，如果想用命令的话，需要环境变量    export NVM<em>DIR=&quot;$HOME/.nvm&quot;    [ -s &quot;$NVM</em>DIR/nvm.sh&quot; ] &amp;&amp; . &quot;$NVM_DIR/nvm.sh&quot; .安装 Node.js 的最佳方式是使用 nvm</p><p>3、安装nodejs：     nvm install  stable</p><p>4、安装hexo：    npm install -g hexo-cli</p><p>如果遇到问题参考：https://www.jianshu.com/p/cce30447fc355、在服务器中执行：hexo init username.github.io` （或者你要绑定的域名的名字）这里我是用的域名，    hexo  init  fangyuan.中国</p><hr><h2>二、github仓库创建及hexo配置</h2><p>6、github中注册自己的账号，并建立repositories存储库  （我的https://github.com/jing1234567890）创建一个我们自己的Github Pages项目。点击New repository。<img src="https://i.imgur.com/BIVjBoU.png">7、然后选择主题https://hexo.io/themes/  用git clone 下来你想要的主题到你的仓库中。主题要放在 themes下哦，（后续会在_config.yml里配置的）</p><pre><code>git clone https://github.com/iissnan/hexo-theme-next themes/next</code></pre><p>8、配置你的基础配置文件也是系统配置文件，<code>cd  fangyuan.中国  ；vim  _config.yml</code> 进行编辑，具体配置参考：https://hexo.io/zh-cn/docs/configuration.html  对照着修改，需要注意配置的键值之间一定要有空格。</p><pre><code>title: 方~a源·blog # 网站标题subtitle: Keep It Simple Do It Well # 网站副标题description: 舒展从容的恬静生活-有条不紊的奋斗前行 # 网站描述 language: zh-Hans#语言 中文 theme: next   #刚刚安装的主题名称 deploy:   type: git//使用Git 发布   repo: https://github.com/username/username.github.io.git// 刚创建的Github仓库</code></pre><p>9、接下来是主题配置文件（可选），目录在项目目录fangyuan.中国/themes/_config.yml配置参考：http://theme-next.iissnan.com/getting-started.html#theme-settings</p><hr><h2>三、测试网站可用性</h2><p>10、完成两个配置后可以进行测试：在fangyuan.中国/source/_posts下创建你的第一个博客吧，例如，创建一个名为one.md的文件，注意保存。博客-first-day.md   </p><hr><ul><li>title: 基于centos7搭建的个人blog</li><li>date: 2019-06-01 02:26:30</li><li>tags:</li></ul><hr><p>hexo  s  --debug 意思是开启服务并打开调试功能，通过浏览器中输入https://localhost:4000 本地预览!</p><p>hexo的命令参考：https://hexo.io/zh-cn/docs/commands11、安装hexo-deployer-git自动部署发布工具      npm install hexo-deployer-git --save</p><p>12、测试没问题生成静态网页文件发布至我们的Github pages 中<code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code>  清除缓存文件 &amp;生成静态文件&amp;部署网站如果这是你的第一次，终端会让你输入Github 的邮箱和密码，正确输入后，骚等片刻，就会把你的博客上传至Github 了。13、等待五分钟就可以访问了，浏览器输入，之前github中的仓库名我的是jing1234567890.github.io</p><hr><h2>四、域名绑定到</h2><p>15、如果有域名可以绑定起来，</p><ol><li><p>） 我的是腾讯云的域名，由于是域名到域名直接的解析，所以配置CHNAME，（需要提前在fangyaun.中国/soure文件夹下创建 CNAME的文件，文件没有后缀，里面的内容为你购买的域名，不要以http以及www等前缀，只需域名本身即可，如 l.ibai.cn）主机记录www 记录类型CHNAME记录值jing1234567890.github.io  </p></li><li><p>） 也可以添加ping jing1234567890.github.iojing1234567890.github.io (185.199.111.153) 56(84) bytes of data，解析到的ip 配置，记录类型为A记录，记录值填ip。</p></li></ol><hr><h2>参考文档：</h2><ol><li>如果是windos搭建参考：https://juejin.im/entry/5a574864f265da3e3c6c1217 </li><li>Hexo常用命令以及配置：https://blog.csdn.net/gqzydh/article/details/86569300</li><li><p>个人github项目地址：https://github.com/jing1234567890/jing1234567890.github.io</p><pre><code>                                               2019/6/2 6:33:10 </code></pre></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1&gt;四步完成基于centos7搭建的个人blog&lt;/h1&gt;
&lt;p&gt;**
                                         2019-06-01 02:26:30**&lt;/p&gt;
&lt;h2&gt;搭建blog的原因：&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;经验知识的总结：
        在技术成长的道路中，你肯定会遇到各种各样的问题，为了保证下次遇到同样的问题不会重复浪费时间，就可以把把这些问题记录了下来，防止再次碰到同样的问题还是一头雾水，这样太过浪费时间了。&lt;/li&gt;
&lt;li&gt;建立个人网站：
        不受任何第三方管理，并且还能够自定义成自己喜欢的样子。还有，如果你是个程序猿，那就更没有理由不自己搭建一个独立博客了。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="next" scheme="http://fangyuan.xn--fiqs8s/categories/next/"/>
    
    
      <category term="关于hexo_next搭建" scheme="http://fangyuan.xn--fiqs8s/tags/%E5%85%B3%E4%BA%8Ehexo-next%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
</feed>
